
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Default deny all reads and writes
    match /{document=**} {
      allow read, write: if false;
    }

    function isAppUser() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAppUser() && request.auth.uid == userId;
    }

    function getRole() {
      // Use a path variable to check for existence before accessing .data
      let userDoc = get(/databases/$(database)/documents/users/$(request.auth.uid));
      if (userDoc.data != null) {
        return userDoc.data.role;
      }
      return '';
    }
    
    function isAdmin() {
      return isAppUser() && getRole() == 'Admin';
    }

    match /users/{userId} {
      // Admins can get any user doc, other users can only get their own.
      allow get: if isOwner(userId) || isAdmin();
      
      // Any logged-in user can query/list the users collection to populate dropdowns, etc.
      allow list: if isAppUser();

      // A user can create their own profile document when they sign up.
      allow create: if isOwner(userId);
      
      // Users can update their own profile. Admins can update any profile.
      allow update: if isOwner(userId) || isAdmin();

      // Admins can delete users (but not themselves).
      allow delete: if isAdmin() && !isOwner(userId);
    }
    
    // Rules for all other collections
    match /{collection}/{docId} {
      // For now, allow any authenticated user to read/write to other collections.
      // This should be tightened in production (e.g. only assigned user can update a task).
      allow read, write: if isAppUser() && collection != 'users';
    }
  }
}
